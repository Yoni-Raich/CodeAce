[
  {
    "file_name": "C:\\CodeAce\\managers\\file_manager.py",
    "description": "This Python file implements a FileManager class responsible for managing files and directories within a specified source path.  It provides functionalities to scan directories for code files (supporting various extensions), read file content, save and update a JSON mapping of files, and manage a summary markdown document. The class handles file I/O operations, including error handling for file not found and other IO exceptions. It also includes initialization for creating the application data directory and a main JSON file.",
    "functions": "__init__,_initialize_main_json,_create_app_data_dir,scan_directory,read_file,save_mapping,save_summary,read_summary"
  },
  {
    "file_name": "C:\\CodeAce\\managers\\llm_manager.py",
    "description": "This Python file provides a manager class (`LLMManager`) for interacting with various Large Language Models (LLMs) through the LangChain library.  It supports OpenAI, Anthropic, Azure OpenAI, Ollama, and Google Gemini. The manager handles API key initialization from environment variables or user-provided keys, and allows for the creation of LLM instances based on a specified model name.  It offers flexibility in configuring LLM parameters such as temperature and model selection.  Error handling is included for unsupported models and missing API keys.",
    "functions": "__init__,create_model_instance_by_name,_initialize_api_key,_get_openai_llm,_get_anthropic_llm,_get_azure_openai_llm,_get_ollama_llm,_get_gemini_llm"
  },
  {
    "file_name": "C:\\CodeAce\\managers\\prompt_manager.py",
    "description": "This Python code defines a `PromptManager` class that facilitates the creation of Langchain prompt templates for code file analysis and project summary updates. It leverages Langchain's `PromptTemplate`, `RunnableSequence`, and output parsers to process code files and generate descriptions and summaries.  The `create_mapping_chain` method constructs a chain for analyzing code files, extracting descriptions and function names, and outputting the results in JSON format. The `create_summery_update_chain` method builds a chain for updating a project summary by incorporating information from a new file, maintaining a natural language description without code snippets.",
    "functions": "create_mapping_chain,create_summery_update_chain"
  }
]